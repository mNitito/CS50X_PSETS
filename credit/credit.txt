// how many use of numbers each credit card use

American Express uses 15-digit numbers.
MasterCard uses 16-digit numbers.
Visa uses 13- and 16-digit numbers.

 structures of each credit card

 All American Express numbers start with 34 or 37
 most MasterCard numbers start with 51, 52, 53, 54, or 55
 all Visa numbers start with 4

 // Note

 credit card numbers also have a “checksum” built into them ..(a mathematical relationship between at least one number and others)
 to detect typos (e.g., transpositions), if not fraudulent numbers, without having to query a database

 Luhn’s Algorithm:

1-Multiply every other digit by 2, starting with the number’s second-to-last digit, and then add those products’ digits together.
2-Add the sum to the sum of the digits that weren’t multiplied by 2.
3-If the total’s last digit is 0 (or, put more formally, if the total modulo 10 is congruent to 0), the number is valid!

for ex:
4003600000000014.
1) 1*2 + 0*2 + 0*2 + 0*2 + 0*2 + 6*2 + 4*2 = 2 + 1 + 2 + 8 = 13
2) 4 + 0 + 0 + 0 + 0 + 0 + 3 + 0 + (13) = 20
3) since the total last digit  == 0; thus it is valid

-- if last index equal to zeroo thus it is valid

.. how to get the last digit
for ex: 4003600000000014 .. the last digit is equal to the reminder resulting from dividing by 10
thus last digit == 4003600000000014 % 10 == 4;

ToDO
1) prompt the user for input
2) checksum function // to check if the last digit is zero or none , to detrmine if the card is valid or not
3) check for the card length and starting digits
4) print the type of the card

checkSUM
last-inteager
starts with the number secound's last digit
multiply everyother digits by 2

4003600000000014
last-inteager = 4
4 equal to index 15 .. we want 1 which is index 14 then multiply it by 2
then we want 0 which is index 12 then multiply it by 2
thus index we want modulo 2 is equal to zero
starts with the number  1
multiply 1 by 2 and everyother number

-- if number % 10 = the last integer

4003600000000014
if 4003600000000014 % 10 = 4
if 4003600000000014 % 100 = 1
if 4003600000000014 % 1000 = 0
if 4003600000000014 % 10000 = 0

4003600000000014 % 10^2 * 2
4003600000000014 % 10^4 * 2
4003600000000014 % 10^6 * 2

thus for(int i =0; ????; i+2)
{
    if(4003600000000014 % 10^i == 0)
    {
        sum = sum + number
    }
}


4003600000000014

// for cards that is multiplayed by 2
card1 = ((card % 100) / 10) * 2;
card2 = ((card % 10000) / 1000) * 2;
card3 = ((card % 1000000) / 100000) * 2;
card4 = ((card % 100000000) / 10000000) * 2;
card5 = ((card % 10000000000) / 1000000000) * 2;
card6 = ((card % 1000000000000) / 100000000000) * 2;
card7 = ((card % 100000000000000) / 10000000000000) * 2;
card8 = ((card % 10000000000000000) / 1000000000000000) * 2;
//           for secound digit        for first digit (last digit)
// card(n) = ((card(n) % 100) / 10) + ((card(n) % 10) / 1);
card1 = ((card1 % 100) / 10) + ((card1 % 10) / 1);
card2 = ((card2 % 100) / 10) + ((card2 % 10) / 1);
card3 = ((card3 % 100) / 10) + ((card3 % 10) / 1);
card4 = ((card4 % 100) / 10) + ((card4 % 10) / 1);
card5 = ((card5 % 100) / 10) + ((card5 % 10) / 1);
card6 = ((card6 % 100) / 10) + ((card6 % 10) / 1);
card7 = ((card7 % 100) / 10) + ((card7 % 10) / 1);
card8 = ((card8 % 100) / 10) + ((card8 % 10) / 1);

sum1 = card1 + card2 + card3 + card4 + card5 + card6 + card7 + card8;

// for the rest of cards that is not muliplayed byy 2
card9 = ((card % 10 ) / 1);
card10 = ((card % 1000 ) / 100);
card11 = ((card % 100000 ) / 10000);
card12 = ((card % 10000000 ) / 1000000);
card13 = ((card % 1000000000 ) / 100000000);
card14 = ((card % 100000000000 ) / 10000000000);
card15 = ((card % 10000000000000 ) / 1000000000000);
card16 = ((card % 1000000000000000 ) / 100000000000000);

// there is no necessary to differentiate the cards as they doesn't multiplayed by 2

sum2 = card9 + card10 + card11 + card12 + card13 + card14 + card15 + card16;
sum3 = sum1 + sum2;

if (((sum3 % 10) / 1) != 0)
{
    printf("Not Valid /n");
    return 0;
}


int checklength(long card)
{
    long VISA = card;
    long MASTER = card;
    long AMEX = card;

     int length = 0;
    while(card > 0)
    {
        card = card / 10;
        length++;
    }
}

int checkcard(long card)
{

    long VISA = card;
    long MASTER = card;
    long AMEX = card;

    // make length = 0 as we make loop to divded ((card) by 10) until card is smaller than 0
    // in every loop we add length by 1 to detrmine how long the card is.. as by each division
    // we decrease the power of ten so accordly we decreses the card number till it become less than zero
    // so we can detrmine the length of the card for ex: card = 100 = 10 ^ 2 .. while (card > 0)
    // {card = card / 10; length++} 100 > 0 thus 100 / 10 then length = 1 ..10 > 0 thus 10 / 10 length = 2
    // 1 > 0 thus 1 / 10  length = 3 .. 0.1 < 0 thus end .. thus 100 = to 3 length number


    int length = 0;
    while(card > 0)
    {
        card = card / 10;
        length++;
    }


    // Detrmine VISACARD
    // condition >= 10 as visa is 13 or 16 length
    while(card >= 10)
    {
        card = card / 10;
    }
    if (visa == 4 && (length == 13 || length == 16))
    {
        printf("Visa \n");
        return 0;
    }

    // Detrmine AMEX
    // the condition is smaller than 10 ^ 3 as AMEX == 15 length
    // And we need to compare the first two digits ..thus 15 -2 == 13
    while (AMEX >= 10^13)
    {
        AMEX = AMEX / 10;
    }
    if ((AMEX == 34 || AMEX == 37) && length == 15)
    {
        printf("AMEX \n");
        return 0;
    }

    //Detrmine MASTERCARD
    while (MASTER >= 10^14)
    {
        MASTER = MASTER / 10;
    }
    if((MASTER == 51 || MASTER == 52 || MASTER == 53 || MASTER == 54 || (MASTER == 55) && length == 16 ))
    {
        printf("MASTER \n");
        return 0;
    }
    else
    {
        printf("INVALID \n");
        return 0;
    }
}




